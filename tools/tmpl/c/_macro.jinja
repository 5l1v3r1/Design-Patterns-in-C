{# function generate temple macro list
ref:	{%- import '_macro.jinja' as func -%}
use:	{{ func.macro_loop_functions(name,'static',routines,'printf') }}
#}
{% include '_common.jinja' %}

{# file header #}
{%- macro file_header(file,copyright,author,date,summary) %}
/**
 * {{ file }}  {{ author }}  {{ date }}
{% for one_line in copyright %}
 * {{ one_line }}
{% endfor %}
 *
{% for one_line in summary %}
 * {{ one_line }}
{% endfor %}
 */
{%- endmacro -%}


{##################################}
{%- macro macro_function_impl_as_ops(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -%}
{%- if args %}
	{{ name }}->ops->{{ func }}({{ name }}, {{ args }});
{%- else %}
	{{ name }}->ops->{{ func }}({{ name }});
{%- endif -%}

	{%- if rtn_type[-1] == '*' %}
	return 0;
	{%- elif rtn_type == 'char *' %}
	return 0;
	{%- elif rtn_type == 'int' %}
	return 0;
	{%- endif -%}
{%- endmacro -%}


{##################################}
{%- macro macro_function_impl_as_printf(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) %}
	printf("{{ name }}::{{ func }}()\n");
	{%- if rtn_type[-1] == '*' %}
	return 0;
	{%- elif rtn_type == 'char *' %}
	return 0;
	{%- elif rtn_type == 'int' %}
	return 0;
	{%- endif -%}
{% endmacro -%}


{##################################}
{%- macro macro_function_impl(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) %}
{% if qualifier %}
{{ qualifier }}
{%- endif -%}
{% if params %}
{{ rtn_type }} {{ format_str|format(name,func) }}(struct {% if abstract_name %}{{ abstract_name }}{% else %}{{ name }}{% endif %} *{% if abstract_name %}{{ abstract_name }}{% else %}{{ name }}{% endif %}, {{ params }})
{
	{{ caller() }}
}
{% else %}
{{ rtn_type }} {{ format_str|format(name,func) }}(struct {% if abstract_name %}{{ abstract_name }}{% else %}{{ name }}{% endif %} *{% if abstract_name %}{{ abstract_name }}{% else %}{{ name }}{% endif %})
{
	{{ caller() }}
}
{%- endif -%}
{%- endmacro -%}


{##################################}
{%- macro macro_function_declare_as_ops(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -%}
{%- if params %}
	{{ rtn_type }} (*{{ func }})(struct {{ name }} *, {{ params }});
{%- else %}
	{{ rtn_type }} (*{{ func }})(struct {{ name }} *);
{%- endif -%}
{%- endmacro -%}


{##################################}
{%- macro macro_function_declare_as_func(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -%}
{%- if params %}
{{ rtn_type }} {{ format_str|format(name,func) }}(struct {{ name }} *, {{ params }});
{%- else %}
{{ rtn_type }} {{ format_str|format(name,func) }}(struct {{ name }} *);
{%- endif -%}
{%- endmacro -%}


{##################################}
{%- macro macro_function_assign(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -%}
{{ I }}	.{{ func }} = {{ format_str|format(name,func) }},
{% endmacro -%}


{##################################}
{%- macro macro_variable(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) %}
	{{ rtn_type }} {{ func }}{{ params }};
{%- endmacro -%}


{##################################}
@name class name
@functions forearch functions list
@abstract_name 
@scope [private|protected|public]
@static [True|False]
@qualifier static inline
@mode implement as [ops|printf]
#}
{%- macro macro_loop_functions(name,functions,mode,scope='public',static='False',impl_as='',qualifier='',abstract_name='',format_str='') -%}
	{%- for func_scope,is_static,rtn_type,func,params,args in functions -%}
		{%- if mode == "var" -%}
			{{- macro_variable(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
		{%- elif mode == "declare" -%}
			{%- if impl_as == "ops" -%}
				{{- macro_function_declare_as_ops(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
			{%- elif impl_as == "func" -%}
				{{- macro_function_declare_as_func(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
			{%- endif -%}
		{%- elif mode == "assign" -%}
			{{- macro_function_assign(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
		{%- elif mode == "impl" -%}
			{%- call macro_function_impl(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -%}
				{%- if impl_as == "ops" -%}
					{{- macro_function_impl_as_ops(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
				{%- elif impl_as == "printf" -%}
					{{- macro_function_impl_as_printf(name,scope,static,abstract_name,qualifier,func_scope,is_static,rtn_type,func,format_str,params,args) -}}
				{%- endif -%}
			{%- endcall -%}
		{%- endif -%}
	{%- endfor -%}
{%- endmacro -%}

