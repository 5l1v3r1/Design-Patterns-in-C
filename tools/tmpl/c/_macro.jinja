{# function generate temple macro list
ref:	{%- import '_macro.jinja' as func -%}
#}
{%- import '_common.jinja' as header -%}

{# used as helper for format or split #}
{%- set SPACE = ' ' -%}

{# file header #}
{%- macro file_header(file,copyright,author,date,summary) %}
/**
 * {{ file }}  {{ header.get_date(date) -}}
   {{- header.get_author(author) }}
 *
   {{- header.get_copyright(copyright) }}
 *
   {{- header.get_summary(summary) }}
 */
{%- endmacro -%}


{##################################}
{%- macro macro_function_return_value(args) -%}
	{%- if args.func_rtn_type[-1] == '*' %}
	return 0;
	{%- elif args.func_rtn_type == 'char *' %}
	return 0;
	{%- elif args.func_rtn_type == 'int' %}
	return 0;
	{%- endif -%}
{%- endmacro -%}


{##################################}
{%- macro macro_function_impl_as_ops(args) %}
	{% if args.func_rtn_type != 'void' -%}return{{ SPACE }}{%- endif -%}
	{{- args.name }}->ops->{{ args.func -}}({{- args.name -}}
		{%- if args.func_args %}, {{ args.func_args }}{%- endif -%}
	);
{%- endmacro -%}


{##################################}
{%- macro macro_function_impl_as_printf(args) %}
	printf("{{ args.name }}::{{ args.func }}()\n");
	{{- macro_function_return_value(args) -}}
{%- endmacro -%}


{##################################}
{%- macro macro_function_impl(args) %}
{% if args.req_qualifier %}{{ args.req_qualifier }}{{- SPACE -}}{%- endif -%}
{{- args.func_rtn_type }}{{- SPACE -}}
{{- args.func_format_str|format(args.name,args.func) -}}
(
{%- set l_have_params = False -%}

{%- if args.func_is_static == 'False' -%}
	{%- set l_have_params = True -%}

struct{{- SPACE -}}
	{%- if args.abstract_name -%} {{- args.abstract_name -}}
	{%- else -%}{{- args.name -}}
	{%- endif -%}
	{{- SPACE -}}*
	{%- if args.abstract_name -%}{{- args.abstract_name -}}
	{%- else -%}{{- args.name -}}
	{%- endif -%}
{%- endif -%}

{%- if args.func_params -%}
	{%- set l_have_params = True -%}

	{%- if args.func_is_static == 'False' -%},{{- SPACE -}}{%- endif -%}
	{{- args.func_params -}}
{%- endif -%}

{%- if not l_have_params -%}void{%- endif -%}
)
{
{{- caller() }}
}
{%- endmacro -%}


{##################################}
{%- macro macro_function_declare_as_ops(args) %}
	{{ args.func_rtn_type }} (*{{ args.func }})(struct {{ args.name }} *
	{%- if args.func_params %}, {{ args.func_params }}{%- endif %});
{%- endmacro -%}


{##################################}
{%- macro macro_function_declare_as_func(args) %}
{{ args.func_rtn_type }}{{- SPACE -}}
{{- args.func_format_str|format(args.name,args.func) -}}
(
{%- set l_have_params = False -%}

{%- if args.func_is_static == 'False' -%}
	{%- set l_have_params = True -%}
	struct{{- SPACE -}}{{- args.name }}{{- SPACE -}}*
{%- endif -%}

{%- if args.func_params -%}
	{%- set l_have_params = True -%}
	{%- if args.func_is_static == 'False' -%},{{- SPACE -}}{%- endif -%}
	{{- args.func_params -}}
{%- endif -%}

{%- if not l_have_params -%}void{%- endif -%}
);
{%- endmacro -%}


{##################################}
{%- macro macro_function_assign(args) %}
	.{{ args.func }} = {{ args.func_format_str|format(args.name,args.func) }},
{%- endmacro -%}


{##################################}
{%- macro macro_variable(args) %}
	{{ args.func_rtn_type }} {{ args.func }}{{ args.func_params }};
{%- endmacro -%}


{##################################}
@name class name
@functions forearch functions list
@abstract_name 
@scope [private|protected|public]
@static [True|False]
@qualifier static inline
@mode implement as [ops|printf]
#}
{%- macro macro_loop_functions(name,functions,category,mode,scope='None',static='None',qualifier='',format_str='None',abstract_name='') -%}
	{% set l_have_items = [] %}

	{%- for func_is_static,func_scope,func_rtn_type,func,func_params,func_args in functions -%}

	{%- if format_str == "None" -%}
		{%- set format_str='%s_%s' -%}

		{%- if category == "virtuals" -%}
			{%- set format_str='%s_ops_%s' -%}
		{%- endif -%}
	{%- endif -%}

	{%- set args={'name':name, 'abstract_name':abstract_name, 'category':category,
		'req_scope':scope, 'req_static':static, 'req_qualifier':qualifier,
		'func_scope':func_scope,'func_is_static':func_is_static,
		'func_rtn_type':func_rtn_type,'func':func,'func_format_str':format_str,
		'func_params':func_params,'func_args':func_args} -%}

	{%- if (args.req_scope == 'None' or args.func_scope == args.req_scope)
			and (args.req_static == 'None' or args.func_is_static == args.req_static) -%}

		{%- if mode == "var" -%}
			{{- macro_variable(args) -}}
		{%- elif mode == "declare" -%}
			{%- if category == "virtuals" -%}{{- macro_function_declare_as_ops(args) -}}{%- endif -%}
			{%- if category == "methods" -%}{{- macro_function_declare_as_func(args) -}}{%- endif -%}
		{%- elif mode == "assign" -%}
			{% do l_have_items.append(1) %}
			{{- macro_function_assign(args) -}}
		{%- elif mode == "impl-ops" -%}
			{%- call macro_function_impl(args) -%}
				{{- macro_function_impl_as_ops(args) -}}
			{%- endcall -%}
		{%- elif mode == "impl-print" -%}
			{%- call macro_function_impl(args) -%}
				{{- macro_function_impl_as_printf(args) -}}
			{%- endcall -%}
		{%- else -%}
			autogen-template error: jinja template macro_loop_functions's mode value invalid: {{ mode }}
		{%- endif -%}

	{%- endif -%}
	{%- endfor -%}

	{# pad empty if needed #}
	{%- if not l_have_items %}
		{%- if mode == "assign" -%}
			0
		{%- endif -%}
	{%- endif -%}

{%- endmacro -%}

