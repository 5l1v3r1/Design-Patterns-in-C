{%- extends '_source.jinja' -%}
{%- import '_macro.jinja' as func -%}

{%- block method -%}
{{ func.macro_loop_functions(name,'static',methods,'impl','printf') }}
{%- endblock -%}

{%- block vtable_impl -%}
{{ func.macro_loop_functions(name,'static',virtuals,'impl','printf') }}
{%- endblock -%}

{%- block vtable_set %}
static struct {{ name }}_ops {{ name }}_ops = {
{{ func.macro_loop_functions(name,'',virtuals ,'assign','') }}
};
{%- endblock -%}


{%- block supers -%}
{%- if supers -%}
{%- for parent_name,parent_vtables in supers.iteritems() -%}
	{%- for vtable_class_name,vtable_class_detail in parent_vtables.iteritems() -%}
		{{- func.macro_loop_functions(name,'static',vtable_class_detail['virtuals'] ,'impl','printf') }}
{# parent ops #}
static struct {{ vtable_class_name }}_ops {{ vtable_class_name }}_ops = {
	{{ func.macro_loop_functions(name,'',vtable_class_detail['virtuals'] ,'assign','') }}
};
{# end parent ops #}
	{%- endfor -%}
{%- endfor -%}
{%- endif -%}
{%- endblock -%}


{%- block init -%}
{# init implement #}
void {{ name }}_init(struct {{ name }} *{{ name }})
{
	memset({{ name }}, sizeof(*{{ name }}), 0);
{%- if supers -%}
{%- for parent_name,parent_vtables in supers.iteritems() %}
	{{ parent_name }}_init(&{{ name }}.{{ parent_name }});
	{%- for vtable_class_name,vtable_class_detail in parent_vtables.iteritems() %}
	CLASS_OPS_INIT({{ name }}.{{ vtable_class_detail['detail'] }}.ops, {{ vtable_class_name }}_ops);
	{%- endfor -%}
{%- endfor -%}
{% endif -%}

{%- if _have_vtable_new %}
	{{ name }}->ops = &{{ name }}_ops;
{%- endif %}
}
{# end init implement #}
{%- endblock -%}

{%- block routine -%}
	{{- func.macro_loop_functions(name,'',routines,'impl','printf') }}
{%- endblock -%}
